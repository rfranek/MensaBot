<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="add_canteen" xml:space="preserve">
    <value>Added default canteen.</value>
  </data>
  <data name="add_canteen_failed" xml:space="preserve">
    <value>Can't add default canteen.</value>
  </data>
  <data name="add_language" xml:space="preserve">
    <value>Added language"</value>
  </data>
  <data name="add_language_failed" xml:space="preserve">
    <value>Can't add language</value>
  </data>
  <data name="add_tags" xml:space="preserve">
    <value>Added tags to ignore list:</value>
  </data>
  <data name="add_tags_failed" xml:space="preserve">
    <value>Could not add tags.</value>
  </data>
  <data name="canteen" xml:space="preserve">
    <value>canteen</value>
  </data>
  <data name="canteen_not_found" xml:space="preserve">
    <value>Could not find canteen with name</value>
  </data>
  <data name="command_help" xml:space="preserve">
    <value>/help</value>
  </data>
  <data name="command_help_exit" xml:space="preserve">
    <value>for help.</value>
  </data>
  <data name="command_help_intro" xml:space="preserve">
    <value>Use</value>
  </data>
  <data name="deleted_canteen" xml:space="preserve">
    <value>Removed default canteen, if exists.</value>
  </data>
  <data name="deleted_filter" xml:space="preserve">
    <value>Removed filter, if exists.</value>
  </data>
  <data name="failed_sorry" xml:space="preserve">
    <value>I'm sorry 💔!</value>
  </data>
  <data name="not_play_ping_pong" xml:space="preserve">
    <value>I do not play ping pong.</value>
  </data>
  <data name="ping" xml:space="preserve">
    <value>Ping! 🏓</value>
  </data>
  <data name="pong" xml:space="preserve">
    <value>Pong! 🏓</value>
  </data>
  <data name="removed_all_data" xml:space="preserve">
    <value>Removed all data from you!</value>
  </data>
  <data name="removed_all_data_failed" xml:space="preserve">
    <value>Can't remove data from you.</value>
  </data>
  <data name="remove_help" xml:space="preserve">
    <value>Help for /remove</value>
    <comment>headline</comment>
  </data>
  <data name="remove_help_canteen" xml:space="preserve">
    <value>Use: /remove canteen to delte information about the default canteen.</value>
  </data>
  <data name="remove_help_filter" xml:space="preserve">
    <value>Use: /remove filter to delete all filter settings.</value>
  </data>
  <data name="set_fail" xml:space="preserve">
    <value>This did not work. Use: /set help</value>
  </data>
  <data name="set_help" xml:space="preserve">
    <value>Help for /set</value>
  </data>
  <data name="set_help_canteen" xml:space="preserve">
    <value>Use: /set canteen [canteenname] to update the default mensa.</value>
  </data>
  <data name="set_help_filter" xml:space="preserve">
    <value>Use: /set filter [filterA],[filterB].... to ignore meals with given tags, e.g. /set filter vegan,pork...</value>
  </data>
  <data name="unknown_command" xml:space="preserve">
    <value>Unknown command!</value>
  </data>
  <data name="unknown_command_joke_msg" xml:space="preserve">
    <value>- Please do usefull things, otherwise you still will be hungry.</value>
  </data>
  <data name="unknown_language" xml:space="preserve">
    <value>Unknown language.</value>
  </data>
  <data name="wrong_param_remove_canteen" xml:space="preserve">
    <value>Did you mean: /remove canteen or /remove mensa</value>
  </data>
  <data name="wrong_param_remove_filter" xml:space="preserve">
    <value>Did you mean /remove filter?</value>
  </data>
  <data name="canteen_command_examples" xml:space="preserve">
    <value>/canteen, /menu, /nosh, /eat ...</value>
  </data>
  <data name="canteen_command_tag" xml:space="preserve">
    <value>[canteencommand]</value>
  </data>
  <data name="canteen_date_tag" xml:space="preserve">
    <value>[date]</value>
  </data>
  <data name="canteen_explained" xml:space="preserve">
    <value>[canteencommand] [canteenname] [date]</value>
  </data>
  <data name="canteen_name" xml:space="preserve">
    <value>canteen name</value>
  </data>
  <data name="canteen_name_tag" xml:space="preserve">
    <value>[canteenname]</value>
  </data>
  <data name="date_examples" xml:space="preserve">
    <value>today, tomorrow, the_day_after_tomorrow</value>
  </data>
  <data name="date_not_found" xml:space="preserve">
    <value>Could not find date with name</value>
  </data>
  <data name="fail_to_load_information" xml:space="preserve">
    <value>Fail to load information about</value>
  </data>
  <data name="food_tag_alcohol" xml:space="preserve">
    <value>alcohol</value>
  </data>
  <data name="food_tag_beef" xml:space="preserve">
    <value>beef</value>
  </data>
  <data name="food_tag_bio" xml:space="preserve">
    <value>bio</value>
  </data>
  <data name="food_tag_chicken" xml:space="preserve">
    <value>chicken</value>
  </data>
  <data name="food_tag_fish" xml:space="preserve">
    <value>fish</value>
  </data>
  <data name="food_tag_garlic" xml:space="preserve">
    <value>garlic</value>
  </data>
  <data name="food_tag_hogget" xml:space="preserve">
    <value>hogget</value>
  </data>
  <data name="food_tag_pork" xml:space="preserve">
    <value>pork</value>
  </data>
  <data name="food_tag_soup" xml:space="preserve">
    <value>soup</value>
  </data>
  <data name="food_tag_vegan" xml:space="preserve">
    <value>vegan</value>
  </data>
  <data name="food_tag_vegetarian" xml:space="preserve">
    <value>vegetarian</value>
  </data>
  <data name="food_tag_vension" xml:space="preserve">
    <value>vension</value>
  </data>
  <data name="food_tag_vital" xml:space="preserve">
    <value>vital</value>
  </data>
  <data name="help_emoji_description" xml:space="preserve">
    <value>to get a description for emojis</value>
  </data>
  <data name="key" xml:space="preserve">
    <value>key</value>
  </data>
  <data name="list_canteen_description" xml:space="preserve">
    <value>/list canteens - Shows all canteens and their shortcuts.</value>
  </data>
  <data name="list_of_canteens" xml:space="preserve">
    <value>List of all canteens and their shortcuts:</value>
  </data>
  <data name="no_english_available" xml:space="preserve">
    <value>no english translation available</value>
  </data>
  <data name="optional" xml:space="preserve">
    <value>optional</value>
  </data>
  <data name="please_add" xml:space="preserve">
    <value>Please add</value>
  </data>
  <data name="please_note" xml:space="preserve">
    <value>Please note</value>
  </data>
  <data name="reference_1" xml:space="preserve">
    <value>This is not an official bot from Studentenwerk Magdeburg.</value>
  </data>
  <data name="reference_2" xml:space="preserve">
    <value>This bot uses public informations from their website.</value>
  </data>
  <data name="start_exit" xml:space="preserve">
    <value>I can help you to solve this problem.</value>
  </data>
  <data name="start_intro" xml:space="preserve">
    <value>Hungry? 😋</value>
  </data>
  <data name="start_welcome" xml:space="preserve">
    <value>Welcome!</value>
  </data>
  <data name="use_syntax" xml:space="preserve">
    <value>Use this syntax</value>
  </data>
</root>